{
	"AoC.Day Template":
	{
		"prefix": "aocdaytemplate",
		"description": "Create a new day that implements AoC.Core.Day",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"",
			"namespace AoC._${TM_DIRECTORY/^.+\\\\(.*)$/$1/}$0",
			"{",
			"    class $TM_FILENAME_BASE : Core.Day",
			"    {",
			"        public $TM_FILENAME_BASE() { }",
			"",
			"        public override string GetSolutionVersion(Core.Part part)",
			"        {",
			"            return part switch",
			"            {",
			"                // Core.Part.One => \"v1\",",
			"                // Core.Part.Two => \"v1\",",
			"                _ => base.GetSolutionVersion(part),",
			"            };",
			"        }",
			"",
			"        protected override List<Core.TestDatum> GetTestData()",
			"        {",
			"            List<Core.TestDatum> testData =",
			"            [",
			"                new Core.TestDatum",
			"                {",
			"                    TestPart = Core.Part.One,",
			"                    Output = \"\",",
			"                    RawInput =",
			"@\"\"",
			"                },",
			"                new Core.TestDatum",
			"                {",
			"                    TestPart = Core.Part.Two,",
			"                    Output = \"\",",
			"                    RawInput =",
			"@\"\"",
			"                },",
			"            ];",
			"            return testData;",
			"        }",
			"",
			"        private string SharedSolution(List<string> inputs, Dictionary<string, string> variables, bool _)",
			"        {",
			"            return string.Empty;",
			"        }",
			"",
			"        protected override string RunPart1Solution(List<string> inputs, Dictionary<string, string> variables)",
			"            => SharedSolution(inputs, variables, false);",
			"",
			"        protected override string RunPart2Solution(List<string> inputs, Dictionary<string, string> variables)",
			"            => SharedSolution(inputs, variables, true);",
			"    }",
			"}"
		]
	},
	"":
	{
		"prefix": "aocdayvartemplate",
		"description": "Create a new day that implements AoC.Core.Day",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"",
			"namespace AoC._${TM_DIRECTORY/^.+\\\\(.*)$/$1/}$0",
			"{",
			"    class $TM_FILENAME_BASE : Core.Day",
			"    {",
			"        public $TM_FILENAME_BASE() { }",
			"",
			"        public override string GetSolutionVersion(Core.Part part)",
			"        {",
			"            return part switch",
			"            {",
			"                // Core.Part.One => \"v1\",",
			"                // Core.Part.Two => \"v1\",",
			"                _ => base.GetSolutionVersion(part),",
			"            };",
			"        }",
			"",
			"        protected override List<Core.TestDatum> GetTestData()",
			"        {",
			"            List<Core.TestDatum> testData =",
			"            [",
			"                new Core.TestDatum",
			"                {",
			"                    TestPart = Core.Part.One,",
			"                    Output = \"\",",
			"                    Variables = new Dictionary<string, string> { { nameof(_VarName), \"0\" } },",
			"                    RawInput =",
			"@\"\"",
			"                },",
			"                new Core.TestDatum",
			"                {",
			"                    TestPart = Core.Part.Two,",
			"                    Output = \"\",",
			"                    Variables = new Dictionary<string, string> { { nameof(_VarName), \"0\" } },",
			"                    RawInput =",
			"@\"\"",
			"                },",
			"            ];",
			"            return testData;",
			"        }",
			"#pragma warning disable IDE1006 // Naming Styles",
			"        private static int _VarName { get; }",
			"#pragma warning restore IDE1006 // Naming Styles",
			"",
			"        private string SharedSolution(List<string> inputs, Dictionary<string, string> variables, bool _)",
			"        {",
            "            GetVariable(nameof(_VarName), 1, variables, out int varName);",
			"            return string.Empty;",
			"        }",
			"",
			"        protected override string RunPart1Solution(List<string> inputs, Dictionary<string, string> variables)",
			"            => SharedSolution(inputs, variables, false);",
			"",
			"        protected override string RunPart2Solution(List<string> inputs, Dictionary<string, string> variables)",
			"            => SharedSolution(inputs, variables, true);",
			"    }",
			"}"
		]
	}
}